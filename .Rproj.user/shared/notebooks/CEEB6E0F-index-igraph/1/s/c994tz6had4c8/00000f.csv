"0","word_correlation_network <- function(dfm_object,"
"0","                                     doc_var = NULL,"
"0","                                     common_term_n = 130,"
"0","                                     corr_n = 0.4,"
"0","                                     top_node_n = 40,"
"0","                                     nrows = 1,"
"0","                                     height = 1000,"
"0","                                     width = 900,"
"0","                                     pattern = NULL,"
"0","                                     showlegend = TRUE,"
"0","                                     seed = NULL) {"
"0",""
"0","  dfm_td <- tidytext::tidy(dfm_object)"
"0","  docvars_df <- dfm_object@docvars"
"0","  docvars_df$document <- docvars_df$docname_"
"0","  dfm_td <- dplyr::left_join(dfm_td, docvars_df, by = ""document"")"
"0",""
"0","  if (!is.null(doc_var) && doc_var != """" && !doc_var %in% colnames(dfm_td)) {"
"0","    message(""Document-level metadata variable '"", doc_var, ""' was not selected or not found."")"
"0","    doc_var <- NULL"
"0","  }"
"0",""
"0","  if (!is.null(doc_var) && doc_var %in% colnames(dfm_td)) {"
"0","    docvar_levels <- unique(dfm_td[[doc_var]])"
"0","    print(paste(""doc_var has"", length(docvar_levels), ""levels:"", paste(docvar_levels, collapse = "", "")))"
"0","  } else {"
"0","    docvar_levels <- NULL"
"0","  }"
"0",""
"0","  build_table <- function(net, group_label) {"
"0","    layout_dff <- net$layout_df %>%"
"0","      dplyr::select(-c(""x"", ""y"")) %>%"
"0","      dplyr::mutate_if(is.numeric, round, digits = 3)"
"0",""
"0","    table <- DT::datatable(layout_dff, rownames = FALSE,"
"0","                           extensions = 'Buttons',"
"0","                           options = list(scrollX = TRUE,"
"0","                                          width = ""80%"","
"0","                                          dom = 'Bfrtip',"
"0","                                          buttons = c('copy', 'csv', 'excel', 'pdf', 'print'))) %>%"
"0","      DT::formatStyle(columns = colnames(layout_dff), `font-size` = ""16px"")"
"0",""
"0","    htmltools::tagList("
"0","      htmltools::tags$div("
"0","        style = ""margin-bottom: 20px;"","
"0","        htmltools::tags$p("
"0","          group_label,"
"0","          style = ""font-weight: bold; text-align: center; font-size: 14pt;"""
"0","        )"
"0","      ),"
"0","      table"
"0","    )"
"0","  }"
"0",""
"0","  build_summary <- function(net, group_label) {"
"0","    g <- net$graph"
"0","    summary_df <- data.frame("
"0","      Metric = c(""Nodes"", ""Edges"", ""Density"", ""Diameter"","
"0","                 ""Global Clustering Coefficient"", ""Local Clustering Coefficient (Mean)"","
"0","                 ""Modularity"", ""Assortativity"", ""Geodesic Distance (Mean)""),"
"0","      Value = c("
"0","        igraph::vcount(g),"
"0","        igraph::ecount(g),"
"0","        igraph::edge_density(g),"
"0","        igraph::diameter(g),"
"0","        igraph::transitivity(g, type = ""global""),"
"0","        mean(igraph::transitivity(g, type = ""local""), na.rm = TRUE),"
"0","        igraph::modularity(g, membership = igraph::V(g)$community),"
"0","        igraph::assortativity_degree(g),"
"0","        mean(igraph::distances(g)[igraph::distances(g) != Inf], na.rm = TRUE)"
"0","      )"
"0","    ) %>%"
"0","      dplyr::mutate_if(is.numeric, round, digits = 3)"
"0",""
"0","    summary_table <- DT::datatable(summary_df, rownames = FALSE,"
"0","                                   extensions = 'Buttons',"
"0","                                   options = list(scrollX = TRUE,"
"0","                                                  width = ""80%"","
"0","                                                  dom = 'Bfrtip',"
"0","                                                  buttons = c('copy', 'csv', 'excel', 'pdf', 'print'))) %>%"
"0","      DT::formatStyle(columns = colnames(summary_df), `font-size` = ""16px"")"
"0",""
"0","    htmltools::tagList("
"0","      htmltools::tags$div("
"0","        style = ""margin-bottom: 20px;"","
"0","        htmltools::tags$p("
"0","          group_label,"
"0","          style = ""font-weight: bold; text-align: center; font-size: 14pt;"""
"0","        )"
"0","      ),"
"0","      summary_table"
"0","    )"
"0","  }"
"0",""
"0","  build_network_plot <- function(data, group_level = NULL) {"
"0","    if (!is.null(seed)) set.seed(seed)"
"0","    term_cor <- data %>%"
"0","      group_by(term) %>%"
"0","      filter(n() >= common_term_n) %>%"
"0","      widyr::pairwise_cor(term, document, sort = TRUE) %>%"
"0","      dplyr::ungroup() %>%"
"0","      dplyr::filter(correlation > corr_n)"
"0",""
"0","    if (!is.null(pattern)) {"
"0","      term_cor <- term_cor %>%"
"0","        dplyr::filter(grepl(pattern, item1, ignore.case = TRUE) | grepl(pattern, item2, ignore.case = TRUE))"
"0","    }"
"0",""
"0","    graph <- igraph::graph_from_data_frame(term_cor, directed = FALSE)"
"0","    if(igraph::vcount(graph) == 0) {"
"0","      message(""No correlation relationships meet the threshold."")"
"0","      return(NULL)"
"0","    }"
"0","    igraph::V(graph)$degree      <- igraph::degree(graph)"
"0","    igraph::V(graph)$betweenness <- igraph::betweenness(graph)"
"0","    igraph::V(graph)$closeness   <- igraph::closeness(graph)"
"0","    igraph::V(graph)$eigenvector <- igraph::eigen_centrality(graph)$vector"
"0","    igraph::V(graph)$community   <- igraph::cluster_leiden(graph)$membership"
"0",""
"0","    layout_mat <- igraph::layout_with_fr(graph)"
"0","    layout_df <- as.data.frame(layout_mat) %>% stats::setNames(c(""x"", ""y""))"
"0","    layout_df <- layout_df %>%"
"0","      dplyr::mutate(label       = igraph::V(graph)$name,"
"0","                    degree      = igraph::V(graph)$degree,"
"0","                    betweenness = igraph::V(graph)$betweenness,"
"0","                    closeness   = igraph::V(graph)$closeness,"
"0","                    eigenvector = igraph::V(graph)$eigenvector,"
"0","                    community   = igraph::V(graph)$community)"
"0",""
"0","    edge_data <- igraph::as_data_frame(graph, what = ""edges"") %>%"
"0","      dplyr::mutate(x    = layout_df$x[match(from, layout_df$label)],"
"0","                    y    = layout_df$y[match(from, layout_df$label)],"
"0","                    xend = layout_df$x[match(to, layout_df$label)],"
"0","                    yend = layout_df$y[match(to, layout_df$label)],"
"0","                    correlation = correlation) %>%"
"0","      dplyr::select(from, to, x, y, xend, yend, correlation) %>%"
"0","      dplyr::mutate(line_group = as.integer({"
"0","        b <- unique(stats::quantile(correlation, probs = seq(0, 1, length.out = 6), na.rm = TRUE))"
"0","        if (length(b) < 2) {"
"0","          b <- c(b, b[length(b)] + 1e-6)"
"0","        }"
"0","        cut(correlation, breaks = b, include.lowest = TRUE)"
"0","      }),"
"0","      line_width = scales::rescale(line_group, to = c(1, 5)),"
"0","      alpha      = scales::rescale(line_group, to = c(0.1, 0.3)))"
"0",""
"0","    edge_group_labels <- edge_data %>%"
"0","      group_by(line_group) %>%"
"0","      dplyr::summarise("
"0","        min_corr = min(correlation, na.rm = TRUE),"
"0","        max_corr = max(correlation, na.rm = TRUE)"
"0","      ) %>%"
"0","      dplyr::mutate(label = paste0(""Correlation: "", round(min_corr, 2), "" - "", round(max_corr, 2))) %>%"
"0","      dplyr::pull(label)"
"0",""
"0","    node_data <- layout_df %>%"
"0","      dplyr::mutate("
"0","        degree_log = log1p(degree),"
"0","        size = scales::rescale(degree_log, to = c(12, 30)),"
"0","        text_size = scales::rescale(degree_log, to = c(14, 20)),"
"0","        alpha = scales::rescale(degree_log, to = c(0.2, 1)),"
"0","        hover_text = paste("
"0","          ""Word:"", label,"
"0","          ""<br>Degree:"", degree,"
"0","          ""<br>Betweenness:"", round(betweenness, 2),"
"0","          ""<br>Closeness:"", round(closeness, 2),"
"0","          ""<br>Eigenvector:"", round(eigenvector, 2),"
"0","          ""<br>Community:"", community,"
"0","          if (!is.null(doc_var)) {"
"0","            if (length(docvar_levels) > 1) {"
"0","              paste0(""<br>"", doc_var, "": "", group_level)"
"0","            } else {"
"0","              paste0(""<br>"", doc_var)"
"0","            }"
"0","          } else """""
"0","        )"
"0","      )"
"0",""
"0","    n_communities <- length(unique(node_data$community))"
"0","    if (n_communities >= 3 && n_communities <= 8) {"
"0","      palette <- RColorBrewer::brewer.pal(n_communities, ""Set2"")"
"0","    } else if (n_communities > 8) {"
"0","      palette <- grDevices::colorRampPalette(RColorBrewer::brewer.pal(8, ""Set2""))(n_communities)"
"0","    } else if (n_communities > 0 && n_communities < 3) {"
"0","      palette <- RColorBrewer::brewer.pal(3, ""Set2"")[1:n_communities]"
"0","    } else {"
"0","      palette <- rep(""#000000"", n_communities)"
"0","    }"
"0",""
"0","    node_data$community <- factor(node_data$community, levels = unique(node_data$community))"
"0","    community_levels <- levels(node_data$community)"
"0","    names(palette) <- community_levels"
"0","    node_data$color <- palette[as.character(node_data$community)]"
"0",""
"0","    p <- plotly::plot_ly(type = 'scatter', mode = 'markers', width = width, height = height)"
"0","    for (lg in unique(edge_data$line_group)) {"
"0","      esub <- dplyr::filter(edge_data, line_group == lg) %>%"
"0","        dplyr::mutate(mid_x = (x + xend) / 2,"
"0","                      mid_y = (y + yend) / 2)"
"0","      if (nrow(esub) > 0) {"
"0","        p <- p %>%"
"0","          plotly::add_segments(data = esub, x = ~x, y = ~y,"
"0","                               xend = ~xend, yend = ~yend,"
"0","                               line = list(color = '#5C5CFF', width = ~line_width),"
"0","                               hoverinfo = 'none', opacity = ~alpha,"
"0","                               showlegend = TRUE, name = edge_group_labels[lg],"
"0","                               legendgroup = ""Edges"") %>%"
"0","          plotly::add_trace(data = esub, x = ~mid_x, y = ~mid_y, type = 'scatter',"
"0","                            mode = 'markers',"
"0","                            marker = list(size = 0.1, color = '#e0f7ff', opacity = 0),"
"0","                            text = ~paste(""Correlation:"", correlation,"
"0","                                          ""<br>Source:"", from,"
"0","                                          ""<br>Target:"", to),"
"0","                            hoverinfo = 'text', showlegend = FALSE)"
"0","      }"
"0","    }"
"0","    for(comm in community_levels) {"
"0","      comm_data <- dplyr::filter(node_data, community == comm)"
"0","      p <- p %>% plotly::add_markers(data = comm_data, x = ~x, y = ~y,"
"0","                                     marker = list(size = ~size, color = palette[comm],"
"0","                                                   showscale = FALSE,"
"0","                                                   line = list(width = 3, color = '#FFFFFF')),"
"0","                                     hoverinfo = 'text', text = ~hover_text,"
"0","                                     showlegend = TRUE, name = paste(""Community"", comm),"
"0","                                     legendgroup = ""Community"")"
"0","    }"
"0","    top_nodes <- dplyr::arrange(node_data, desc(degree)) %>% head(top_node_n)"
"0","    annotations <- lapply(1:nrow(top_nodes), function(i) {"
"0","      list(x = top_nodes$x[i],"
"0","           y = top_nodes$y[i],"
"0","           text = top_nodes$label[i],"
"0","           xanchor = ifelse(top_nodes$x[i] > 0, ""left"", ""right""),"
"0","           yanchor = ifelse(top_nodes$y[i] > 0, ""bottom"", ""top""),"
"0","           xshift = ifelse(top_nodes$x[i] > 0, 5, -5),"
"0","           yshift = ifelse(top_nodes$y[i] > 0, 3, -3),"
"0","           showarrow = FALSE,"
"0","           font = list(size = top_nodes$text_size[i], color = 'black'))"
"0","    })"
"0",""
"0","    p <- p %>% plotly::layout(dragmode = ""pan"","
"0","                              title = list(text = ""Word Correlation Network"", font = list(size = 19, color = ""black"", family = ""Arial Black"")),"
"0","                              showlegend = showlegend,"
"0","                              xaxis = list(title = """", showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),"
"0","                              yaxis = list(title = """", showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),"
"0","                              margin = list(l = 40, r = 100, t = 60, b = 40),"
"0","                              annotations = annotations,"
"0","                              legend = list(title = list(text = ""Correlation""),"
"0","                                            orientation = ""v"", x = 1.1, y = 1,"
"0","                                            xanchor = ""left"", yanchor = ""top""))"
"0","    list(plot = p, layout_df = layout_df, graph = graph)"
"0","  }"
"0",""
"0","  if (!is.null(doc_var) && length(docvar_levels) > 1) {"
"0","    plots_list <- dfm_td %>%"
"0","      dplyr::ungroup() %>%"
"0","      dplyr::group_by(!!rlang::sym(doc_var)) %>%"
"0","      dplyr::group_map(~ {"
"0","        group_level <- .y[[doc_var]]"
"0","        print(paste(""Processing group level:"", group_level))"
"0",""
"0","        if (is.null(group_level)) {"
"0","          stop(""doc_var is missing or not found in the current group"")"
"0","        }"
"0",""
"0","        net <- build_network_plot(.x, group_level)"
"0","        if (!is.null(net)) {"
"0","          net$plot %>% plotly::layout("
"0","            annotations = list("
"0","              list("
"0","                text = group_level,"
"0","                x = 0.42,"
"0","                xanchor = ""center"","
"0","                y = 0.98,"
"0","                yanchor = ""bottom"","
"0","                yref = ""paper"","
"0","                showarrow = FALSE,"
"0","                font = list(size = 19, color = ""black"", family = ""Arial Black"")"
"0","              )"
"0","            )"
"0","          )"
"0","        } else {"
"0","          NULL"
"0","        }"
"0","      })"
"0",""
"0","    combined_plot <- plotly::subplot(plots_list, nrows = nrows, shareX = TRUE, shareY = TRUE,"
"0","                                     titleX = TRUE, titleY = TRUE)"
"0",""
"0","    table_list <- lapply(docvar_levels, function(level) {"
"0","      print(paste(""Generating table for level:"", level))"
"0","      group_data <- dplyr::filter(dfm_td, !!rlang::sym(doc_var) == level)"
"0","      net <- build_network_plot(group_data)"
"0","      if (!is.null(net)) build_table(net, level) else NULL"
"0","    })"
"0",""
"0","    summary_list <- lapply(docvar_levels, function(level) {"
"0","      print(paste(""Generating summary for level:"", level))"
"0","      group_data <- dplyr::filter(dfm_td, !!rlang::sym(doc_var) == level)"
"0","      net <- build_network_plot(group_data)"
"0","      if (!is.null(net)) build_summary(net, level) else NULL"
"0","    })"
"0",""
"0","    return(list("
"0","      plot = combined_plot,"
"0","      table = table_list %>% htmltools::tagList() %>% htmltools::browsable(),"
"0","      summary = summary_list %>% htmltools::tagList() %>% htmltools::browsable()"
"0","    ))"
"0","  } else {"
"0","    net <- build_network_plot(dfm_td)"
"0","    if (is.null(net)) {"
"0","      message(""No network generated."")"
"0","      return(NULL)"
"0","    }"
"0","    return(list("
"0","      plot = net$plot,"
"0","      table = build_table(net,"
"0","                          if (!is.null(doc_var)) paste(""Network Centrality Table for"", doc_var)"
"0","                          else ""Network Centrality Table"") %>% htmltools::browsable(),"
"0","      summary = build_summary(net,"
"0","                              if (!is.null(doc_var)) paste(""Network Summary for"", doc_var)"
"0","                              else ""Network Summary"") %>% htmltools::browsable()"
"0","    ))"
"0","  }"
"0","}"
