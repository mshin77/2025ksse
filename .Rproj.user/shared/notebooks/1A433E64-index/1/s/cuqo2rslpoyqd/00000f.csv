"0","word_correlation_network <- function(dfm_object,"
"0","                                     doc_var = NULL,"
"0","                                     common_term_n = 130,"
"0","                                     corr_n = 0.4,"
"0","                                     top_node_n = 40,"
"0","                                     node_label = 50,"
"0","                                     nrows = 1,"
"0","                                     height = 1000,"
"0","                                     width = 900,"
"0","                                     pattern = NULL,"
"0","                                     showlegend = TRUE,"
"0","                                     show_node_selection = TRUE,"
"0","                                     show_community_selection = TRUE,"
"0","                                     seed = NULL) {"
"0","    "
"0","    dfm_td <- tidytext::tidy(dfm_object)"
"0","    docvars_df <- dfm_object@docvars"
"0","    docvars_df$document <- docvars_df$docname_"
"0","    dfm_td <- dplyr::left_join(dfm_td, docvars_df, by = ""document"")"
"0","    "
"0","    if (!is.null(doc_var) && doc_var != """" && !doc_var %in% colnames(dfm_td)) {"
"0","        message(""Document-level metadata variable '"", doc_var, ""' was not selected or not found."")"
"0","        doc_var <- NULL"
"0","    }"
"0","    "
"0","    if (!is.null(doc_var) && doc_var %in% colnames(dfm_td)) {"
"0","        docvar_levels <- unique(dfm_td[[doc_var]])"
"0","        print(paste(""doc_var has"", length(docvar_levels), ""levels:"", paste(docvar_levels, collapse = "", "")))"
"0","    } else {"
"0","        docvar_levels <- NULL"
"0","    }"
"0","    "
"0","    build_table <- function(net, group_label) {"
"0","        layout_dff <- net$layout_df %>%"
"0","            dplyr::select(-c(""x"", ""y"")) %>%"
"0","            dplyr::mutate_if(is.numeric, round, digits = 3)"
"0","        "
"0","        table <- DT::datatable(layout_dff, rownames = FALSE,"
"0","                               extensions = 'Buttons',"
"0","                               options = list(scrollX = TRUE,"
"0","                                              width = ""80%"","
"0","                                              dom = 'Bfrtip',"
"0","                                              buttons = c('copy', 'csv', 'excel', 'pdf', 'print'))) %>%"
"0","            DT::formatStyle(columns = colnames(layout_dff), `font-size` = ""16px"")"
"0","        "
"0","        htmltools::tagList("
"0","            htmltools::tags$div("
"0","                style = ""margin-bottom: 20px;"","
"0","                htmltools::tags$p("
"0","                    group_label,"
"0","                    style = ""font-weight: bold; text-align: center; font-size: 14pt;"""
"0","                )"
"0","            ),"
"0","            table"
"0","        )"
"0","    }"
"0","    "
"0","    build_summary <- function(net, group_label) {"
"0","        g <- net$graph"
"0","        summary_df <- data.frame("
"0","            Metric = c(""Nodes"", ""Edges"", ""Density"", ""Diameter"","
"0","                       ""Global Clustering Coefficient"", ""Local Clustering Coefficient (Mean)"","
"0","                       ""Modularity"", ""Assortativity"", ""Geodesic Distance (Mean)""),"
"0","            Value = c("
"0","                igraph::vcount(g),"
"0","                igraph::ecount(g),"
"0","                igraph::edge_density(g),"
"0","                igraph::diameter(g),"
"0","                igraph::transitivity(g, type = ""global""),"
"0","                mean(igraph::transitivity(g, type = ""local""), na.rm = TRUE),"
"0","                igraph::modularity(g, membership = igraph::V(g)$community),"
"0","                igraph::assortativity_degree(g),"
"0","                mean(igraph::distances(g)[igraph::distances(g) != Inf], na.rm = TRUE)"
"0","            )"
"0","        ) %>%"
"0","            dplyr::mutate_if(is.numeric, round, digits = 3)"
"0","        "
"0","        summary_table <- DT::datatable(summary_df, rownames = FALSE,"
"0","                                       extensions = 'Buttons',"
"0","                                       options = list(scrollX = TRUE,"
"0","                                                      width = ""80%"","
"0","                                                      dom = 'Bfrtip',"
"0","                                                      buttons = c('copy', 'csv', 'excel', 'pdf', 'print'))) %>%"
"0","            DT::formatStyle(columns = colnames(summary_df), `font-size` = ""16px"")"
"0","        "
"0","        htmltools::tagList("
"0","            htmltools::tags$div("
"0","                style = ""margin-bottom: 20px;"","
"0","                htmltools::tags$p("
"0","                    group_label,"
"0","                    style = ""font-weight: bold; text-align: center; font-size: 14pt;"""
"0","                )"
"0","            ),"
"0","            summary_table"
"0","        )"
"0","    }"
"0","    "
"0","    build_network_plot <- function(data, group_level = NULL) {"
"0","        if (!is.null(seed)) set.seed(seed)"
"0","        term_cor <- data %>%"
"0","            group_by(term) %>%"
"0","            filter(n() >= common_term_n) %>%"
"0","            widyr::pairwise_cor(term, document, sort = TRUE) %>%"
"0","            dplyr::ungroup() %>%"
"0","            dplyr::filter(correlation > corr_n)"
"0","        "
"0","        if (!is.null(pattern)) {"
"0","            term_cor <- term_cor %>%"
"0","                dplyr::filter(grepl(pattern, item1, ignore.case = TRUE) | grepl(pattern, item2, ignore.case = TRUE))"
"0","        }"
"0","        "
"0","        graph <- igraph::graph_from_data_frame(term_cor, directed = FALSE)"
"0","        if(igraph::vcount(graph) == 0) {"
"0","            message(""No correlation relationships meet the threshold."")"
"0","            return(NULL)"
"0","        }"
"0","        igraph::V(graph)$degree      <- igraph::degree(graph)"
"0","        igraph::V(graph)$betweenness <- igraph::betweenness(graph)"
"0","        igraph::V(graph)$closeness   <- igraph::closeness(graph)"
"0","        igraph::V(graph)$eigenvector <- igraph::eigen_centrality(graph)$vector"
"0","        igraph::V(graph)$community   <- igraph::cluster_leiden(graph)$membership"
"0","        "
"0","        node_degrees <- igraph::degree(graph)"
"0","        sorted_indices <- order(node_degrees, decreasing = TRUE)"
"0","        top_n <- min(top_node_n, length(sorted_indices))"
"0","        top_nodes <- names(node_degrees)[sorted_indices[1:top_n]]"
"0","        "
"0","        nodes <- data.frame("
"0","            id = igraph::V(graph)$name,"
"0","            label = ifelse(igraph::V(graph)$name %in% top_nodes, igraph::V(graph)$name, """"),"
"0","            group = igraph::V(graph)$community,"
"0","            value = igraph::V(graph)$degree,"
"0","            title = paste0("
"0","                ""<b style='color:black;'>"", igraph::V(graph)$name, ""</b><br>"","
"0","                ""<span style='color:black;'>Degree: "", igraph::V(graph)$degree, ""<br>"","
"0","                ""Betweenness: "", round(igraph::V(graph)$betweenness, 2), ""<br>"","
"0","                ""Closeness: "", round(igraph::V(graph)$closeness, 2), ""<br>"","
"0","                ""Eigenvector: "", round(igraph::V(graph)$eigenvector, 2), ""<br>"","
"0","                ""Community: "", igraph::V(graph)$community, ""</span>"""
"0","            )"
"0","        )"
"0","        edges <- igraph::as_data_frame(graph, what = ""edges"")"
"0","        edges$correlation <- term_cor$correlation[match(paste(edges$from, edges$to), paste(term_cor$item1, term_cor$item2))]"
"0","        edges$width <- scales::rescale(edges$correlation, to = c(1, 8))"
"0","        "
"0","        # Set edge color and alpha based on correlation"
"0","        edge_color_base <- ""#5C5CFF"""
"0","        edges$color <- mapply(function(corr) {"
"0","          alpha_val <- scales::rescale(abs(corr), to = c(0.3, 1))"
"0","          scales::alpha(edge_color_base, alpha_val)"
"0","        }, edges$correlation)"
"0","        edges$title <- paste0("
"0","          ""<span style='color:black;'>Correlation: "", round(edges$correlation, 3),"
"0","          ""<br>Source: "", edges$from,"
"0","          ""<br>Target: "", edges$to, ""</span>"""
"0","        )"
"0","        "
"0","        unique_communities <- sort(unique(nodes$group))"
"0","        community_map <- setNames(seq_along(unique_communities), unique_communities)"
"0","        nodes$group <- community_map[as.character(nodes$group)]"
"0","        "
"0","        n_communities <- length(unique(nodes$group))"
"0","        if (n_communities <= 8) {"
"0","          palette <- brewer.pal(n_communities, ""Set2"")"
"0","        } else {"
"0","          palette <- colorRampPalette(brewer.pal(8, ""Set2""))(n_communities)"
"0","        }"
"0","        community_colors <- setNames(palette, as.character(seq_len(n_communities)))"
"0","        nodes$color <- community_colors[as.character(nodes$group)]"
"0","        "
"0","        legend_labels <- lapply(seq_len(n_communities), function(i) {"
"0","          list(label = paste0(""Community "", i, "" ""), color = community_colors[as.character(i)], shape = ""dot"")"
"0","        })"
"0","        "
"0","        plot <- visNetwork(nodes, edges) %>%"
"0","            visNodes(font = list(color = ""black"", size = node_label, vadjust = -90)) %>%"
"0","            visOptions("
"0","                highlightNearest = list("
"0","                    enabled = TRUE,"
"0","                    degree = 1,"
"0","                    hover = TRUE"
"0","                ),"
"0","                nodesIdSelection = if(show_node_selection) list("
"0","                    enabled = TRUE,"
"0","                    style = ""width: 200px; height: 26px;"","
"0","                    main = ""Select Node"","
"0","                    values = nodes$id"
"0","                ) else FALSE,"
"0","                manipulation = FALSE,"
"0","                selectedBy = if(show_community_selection) list("
"0","                    variable = ""group"","
"0","                    multiple = TRUE,"
"0","                    style = ""width: 200px; height: 26px;"","
"0","                    values = sort(unique(nodes$group)),"
"0","                    main = ""Select Community"""
"0","                ) else NULL"
"0","            ) %>%"
"0","            visPhysics("
"0","                solver = ""barnesHut"","
"0","                barnesHut = list("
"0","                    gravitationalConstant = -1500,"
"0","                    centralGravity = 0.4,"
"0","                    springLength = 100,"
"0","                    springConstant = 0.05,"
"0","                    avoidOverlap = 0.3 "
"0","                ),"
"0","                stabilization = list(enabled = TRUE, iterations = 1000)"
"0","            ) %>%"
"0","            {if (showlegend) visLegend(., "
"0","                addNodes = do.call(rbind, lapply(legend_labels, as.data.frame)),"
"0","                useGroups = FALSE,"
"0","                position = ""right"","
"0","                width = 0.2,"
"0","                zoom = FALSE"
"0","            ) else .} %>%"
"0","            visLayout(randomSeed = ifelse(is.null(seed), 2025, seed))"
"0","        "
"0","        return(list(plot = plot, nodes = nodes, edges = edges, graph = graph))"
"0","    }"
"0","    "
"0","    if (!is.null(doc_var) && length(docvar_levels) > 1) {"
"0","        plots_list <- dfm_td %>%"
"0","            dplyr::ungroup() %>%"
"0","            dplyr::group_by(!!rlang::sym(doc_var)) %>%"
"0","            dplyr::group_map(~ {"
"0","                group_level <- .y[[doc_var]]"
"0","                print(paste(""Processing group level:"", group_level))"
"0","                "
"0","                if (is.null(group_level)) {"
"0","                    stop(""doc_var is missing or not found in the current group"")"
"0","                }"
"0","                "
"0","                net <- build_network_plot(.x, group_level)"
"0","                if (!is.null(net)) {"
"0","                    net$vis %>% visNetwork::visLayout("
"0","                        annotations = list("
"0","                            list("
"0","                                text = group_level,"
"0","                                x = 0.42,"
"0","                                xanchor = ""center"","
"0","                                y = 0.98,"
"0","                                yanchor = ""bottom"","
"0","                                yref = ""paper"","
"0","                                showarrow = FALSE,"
"0","                                font = list(size = 19, color = ""black"", family = ""Arial Black"")"
"0","                            )"
"0","                        )"
"0","                    )"
"0","                } else {"
"0","                    NULL"
"0","                }"
"0","            })"
"0","        "
"0","        combined_plot <- plotly::subplot(plots_list, nrows = nrows, shareX = TRUE, shareY = TRUE,"
"0","                                         titleX = TRUE, titleY = TRUE)"
"0","        "
"0","        table_list <- lapply(docvar_levels, function(level) {"
"0","            print(paste(""Generating table for level:"", level))"
"0","            group_data <- dplyr::filter(dfm_td, !!rlang::sym(doc_var) == level)"
"0","            net <- build_network_plot(group_data)"
"0","            if (!is.null(net)) build_table(net, level) else NULL"
"0","        })"
"0","        "
"0","        summary_list <- lapply(docvar_levels, function(level) {"
"0","            print(paste(""Generating summary for level:"", level))"
"0","            group_data <- dplyr::filter(dfm_td, !!rlang::sym(doc_var) == level)"
"0","            net <- build_network_plot(group_data)"
"0","            if (!is.null(net)) build_summary(net, level) else NULL"
"0","        })"
"0","        "
"0","        return(list("
"0","            plot = combined_plot,"
"0","            table = table_list %>% htmltools::tagList() %>% htmltools::browsable(),"
"0","            summary = summary_list %>% htmltools::tagList() %>% htmltools::browsable()"
"0","        ))"
"0","    } else {"
"0","        net <- build_network_plot(dfm_td)"
"0","        if (is.null(net) || is.null(net$nodes) || is.null(net$edges) || is.null(net$graph)) {"
"0","            message(""No network generated."")"
"0","            return(list("
"0","                plot = NULL,"
"0","                table = NULL,"
"0","                summary = NULL"
"0","            ))"
"0","        }"
"0","        return(list("
"0","            plot = net$plot,"
"0","            table = if (!is.null(net$layout_df)) build_table(net,"
"0","                                                             if (!is.null(doc_var)) paste(""Network Centrality Table for"", doc_var)"
"0","                                                             else ""Network Centrality Table"") else NULL,"
"0","            summary = if (!is.null(net$layout_df)) build_summary(net,"
"0","                                                                 if (!is.null(doc_var)) paste(""Network Summary for"", doc_var)"
"0","                                                                 else ""Network Summary"") else NULL"
"0","        ))"
"0","    }"
"0","}"
